using System;
using System.Collections.Generic;

namespace DataAccess.ResultSets
{
	/// <summary>
	/// 
	/// </summary>
	[Serializable]
	public class BaseResult
	{
		#region Fields
		/// <summary>
		/// 
		/// </summary>
		private bool _succeeded;

		/// <summary>
		/// 
		/// </summary>
		protected List<string> BoroughNames = new List<string>(5) { "Manhattan", "Bronx", "Brooklyn", "Queens", "Staten Island" };
		#endregion Fields

		#region Properties
		/// <summary>
		/// 'result' column of the stored procedure result set.
		/// </summary>
		/// <remarks>
		/// Possible values are "SUCCESS" and "ERROR".
		/// </remarks>
		public string Result { get; set; }

		/// <summary>
		/// 'resultDetail' column of the stored procedure result set.
		/// </summary>
		/// <remarks>
		/// Possible values: Depends on derived class and the stored procedure that is called.
		/// See the documentation for further details.
		/// </remarks>
		public string ResultDetail { get; set; }

		/// <summary>
		/// A boolean representation of the Result. 'true' if stored procedure returns SUCCESS, otherwise 'false'.
		/// </summary>
		public bool Succeeded
		{
			get { return (String.Equals(Result, "SUCCESS")); }
			set { _succeeded = value; }
		}

		/// <summary>
		/// A boolean flag used to determine if the user's session has timed out.
		/// </summary>
		public bool SessionTimedOut
		{
			get
			{
				//
				if (String.Equals(Result, "ERROR") && String.Equals(ResultDetail, "Session timed out"))
				{
					return true;
				}
				return false;
			}
		}
		#endregion Properties
	}
}
////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Collections;

namespace DataAccess.ResultSets
{
    /// <summary>
    /// The object that represents a collection of rows (the result set) returned 
    /// from a call to the sp_GetAdminUserList stored procedure.
    /// 
    /// The collection is of type: GetAdminUserAccountsResult
    /// </summary>
    /// 
    [Serializable]
    public class GetAdminUserAccountsResultSet : BaseResultSet, ICollection<GetAdminUserAccountsResult>
    {
        #region Fields
		// The inner collection to store objects.
		private readonly List<GetAdminUserAccountsResult> _innerCol;

		// For IsReadOnly. For now we won't be changing any underlying data.
		private const bool IsRo = true;
		#endregion Fields

		#region Constructors
		/// <summary>
		/// 
		/// </summary>
		public GetAdminUserAccountsResultSet()
		{
			_innerCol = new List<GetAdminUserAccountsResult>();
		}
		#endregion Constructors

		#region Methods
		/// <summary>
		/// Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </summary>
		/// <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
		/// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        public void Add(GetAdminUserAccountsResult item)
		{
			//
			if (!Contains(item))
			{
				//
				_innerCol.Add(item);
			}
			else
			{
				// Report that the item is already in the collection by throwing a custom Exception.
			}
		}

		/// <summary>
		/// Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </summary>
		/// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
		public void Clear()
		{
			_innerCol.Clear();
		}

		/// <summary>
		/// Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
		/// </summary>
		/// <returns>
		/// true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
		/// </returns>
		/// <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        public bool Contains(GetAdminUserAccountsResult item)
		{
			bool found = false;

			foreach (var order in _innerCol)
			{
				// Equality defined by the Box
				// class's implmentation of IEquitable<T>.
				if (order.Equals(item))
				{
					found = true;
				}
			}

			return found;
		}

		/// <summary>
		/// Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see 

cref="T:System.Array"/> index.
		/// </summary>
		/// <param name="array">
		/// The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. 
		/// The <see cref="T:System.Array"/> must have zero-based indexing.
		/// </param>
		/// <param name="arrayIndex">
		/// The zero-based index in <paramref name="array"/> at which copying begins.
		/// </param>
		/// <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
		/// <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
		/// <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> 
		/// is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        public void CopyTo(GetAdminUserAccountsResult[] array, int arrayIndex)
		{
			for (int i = 0; i < _innerCol.Count; i++)
			{

				array[i] = _innerCol[i];
			}
		}

		/// <summary>
		/// Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </summary>
		/// <returns>
		/// true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; 
		/// otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see 

cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </returns>
		/// <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
		/// <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        public bool Remove(GetAdminUserAccountsResult item)
		{
			bool result = false;

			// Iterate the inner collection to 
			// find the item to be removed.
			for (int i = 0; i < _innerCol.Count; i++)
			{

				var curItem = _innerCol[i];

				// TODO: Write method to compare items.
				//if (new BankAccountInfo().Equals(curItem, item))
				//{
				//    innerCol.RemoveAt(i);
				//    result = true;
				//    break;
				//}
			}
			return result;
		}

		/// <summary>
		/// Returns an enumerator that iterates through the collection.
		/// </summary>
		/// <returns>
		/// A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
		/// </returns>
		/// <filterpriority>1</filterpriority>
        public IEnumerator<GetAdminUserAccountsResult> GetEnumerator()
		{
            return new GetAdminUserAccountsResultEnumerator(this);
		}

		/// <summary>
		/// Returns an enumerator that iterates through a collection.
		/// </summary>
		/// <returns>
		/// An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
		/// </returns>
		/// <filterpriority>2</filterpriority>
		IEnumerator IEnumerable.GetEnumerator()
		{
            return new GetAdminUserAccountsResultEnumerator(this);
		}
		#endregion Methods

		#region Properties
		/// <summary>
		/// Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </summary>
		/// <returns>
		/// The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
		/// </returns>
		public int Count
		{
			get { return _innerCol.Count; }
		}

		/// <summary>
		/// Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
		/// </summary>
		/// <returns>
		/// true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
		/// </returns>
		public bool IsReadOnly
		{
			get { return IsRo; }
		}

		/// <summary>
		/// Adds an index to the collection.
		/// </summary>
		/// <param name="index"></param>
        public GetAdminUserAccountsResult this[int index]
		{
			get { return _innerCol[index]; }
			set { _innerCol[index] = value; }
		}
		#endregion Properties

		#region Overrides of BaseResultSet

		public override bool SessionTimedOut
		{
			get { return _innerCol.Any(result => result.SessionTimedOut); }
		}

		public override bool Succeeded
		{
			get { return _innerCol.All(result => result.Succeeded); }
		}

		#endregion
	}

	/// <summary>
	/// 
	/// </summary>
	public class GetAdminUserAccountsResultEnumerator : IEnumerator<GetAdminUserAccountsResult>
	{
		#region Fields
		//
		private readonly GetAdminUserAccountsResultSet _collection;

		//
		private int _curIndex;

		//
		private GetAdminUserAccountsResult _curAccount;
		#endregion Fields

		#region Constructors
		/// <summary>
		/// 
		/// </summary>
        /// <param name="getAdminUserAccountsResult"></param>
        public GetAdminUserAccountsResultEnumerator(GetAdminUserAccountsResultSet getAdminUserAccountsResult)
		{
			//
            _collection = getAdminUserAccountsResult;

			//
			_curIndex = -1;

			//
            _curAccount = default(GetAdminUserAccountsResult);
		}
		#endregion Constructors

		#region Methods
		/// <summary>
		/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
		/// </summary>
		/// <filterpriority>2</filterpriority>
		void IDisposable.Dispose() { }

		/// <summary>
		/// Advances the enumerator to the next element of the collection.
		/// </summary>
		/// <returns>
		/// true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
		/// </returns>
		/// <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 

</exception><filterpriority>2</filterpriority>
		public bool MoveNext()
		{
			//Avoids going beyond the end of the collection.
			if (++_curIndex >= _collection.Count)
			{
				return false;
			}
			// Set current box to next item in collection.
			_curAccount = _collection[_curIndex];
			return true;
		}

		/// <summary>
		/// Sets the enumerator to its initial position, which is before the first element in the collection.
		/// </summary>
		/// <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 

</exception><filterpriority>2</filterpriority>
		public void Reset() { _curIndex = -1; }
		#endregion Methods

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		/// <exception cref="NotImplementedException"></exception>
        public GetAdminUserAccountsResult Current
		{
			get { return _curAccount; }
		}

		/// <summary>
		/// Gets the current element in the collection.
		/// </summary>
		/// <returns>
		/// The current element in the collection.
		/// </returns>
		/// <filterpriority>2</filterpriority>
		object IEnumerator.Current
		{
			get { return Current; }
		}

		/// <summary>
		/// Gets the element in the collection at the current position of the enumerator.
		/// </summary>
		/// <returns>
		/// The element in the collection at the current position of the enumerator.
		/// </returns>
        GetAdminUserAccountsResult IEnumerator<GetAdminUserAccountsResult>.Current
		{
			get { return Current; }
		}
		#endregion Properties
    }
}

///////////////////////////////////

		/// <summary>
		/// 
		/// </summary>
		/// <param name="logonId"></param>
		/// <param name="loginPassword"></param>
		/// <param name="ipAddress"> </param>
		/// <returns></returns>
		/// <remarks>
		/// SQL Server specific.
		/// </remarks>
		[Function(Name = "dbo.sp_UserLogin")]
		private ISingleResult<UserLoginResult> UserLogin([Parameter(DbType = "VarChar(50)")] String logonId,
														 [Parameter(DbType = "VarChar(50)")] String loginPassword,
														 [Parameter(DbType = "VarChar(15)")] String ipAddress)
		{
			// {"Parameter '@logonId' must be defined."}
			IExecuteResult result = ExecuteMethodCall(this, ((MethodInfo)(MethodBase.GetCurrentMethod())), logonId,
													  loginPassword, ipAddress);
			if (result != null)
				return ((ISingleResult<UserLoginResult>)(result.ReturnValue));
			return null;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cmd"></param>
		/// <returns></returns>
		private UserLoginResult LoginUser(MySqlCommand cmd)
		{
			//
			UserLoginResult resultObj = null;

			//
			MySqlDataReader rdr = null;

			try
			{
				//
				rdr = cmd.ExecuteReader();

				//
				if (rdr != null && rdr.HasRows)
				{
					//
					rdr.Read();

					//
					resultObj = new UserLoginResult();
					resultObj.Result = rdr["result"] as string;
					resultObj.ResultDetail = rdr["resultDetail"] as string;

					//
					if (resultObj.Succeeded)
					{
						// Load the result object with the return values.
						resultObj.UserGuid = rdr["UserGUID"] as string;
						resultObj.IsActive = (Convert.ToInt32(rdr["IsActive"]) == 1);
						resultObj.IsFirstLogon = (Convert.ToInt32(rdr["IsFirstLogon"]) == 1);
						resultObj.SessionGuid = rdr["SessionGUID"] as string;
						resultObj.IsImported = (Convert.ToInt32(rdr["IsImported"]) == 1);

						// Determine if a hashed password was returned.
						if (!String.IsNullOrEmpty(rdr["password"] as string))
						{
							// Retrieve the input password that was passed to the stored procedure.
							string pwdInput = cmd.Parameters["@pwd"].Value.ToString();

							// Compare the input and output passwords.
							resultObj.HashedPassword = rdr["password"] as string;
							resultObj.PasswordMatch = CheckHashedValue(HashType.Password, pwdInput, rdr["password"] as string);
						}
					}
				}
			}
			catch (Exception ex)
			{
				// TODO: Add some code on the web side to handle errors gracefully.
				throw new ApplicationException(ex.Message);
			}
			finally
			{
				// If the MySqlDataReader is not null and is not closed, close it.
				if (rdr != null && !rdr.IsClosed) rdr.Close();
			}
			//
			return resultObj;
		}

		private UpdateUserProfileResult UpdateUserProfile(MySqlCommand cmdUsername, MySqlCommand cmdEditUser,
														  MySqlCommand cmdPassword, MySqlCommand cmdSecurity)
		{
			//
			var mainResult = new UpdateUserProfileResult();

			//
			MySqlDataReader rdr = null;

			try
			{
				// Update the Username.
				if (cmdUsername != null)
				{
					// Call the Stored procedure.
					rdr = cmdUsername.ExecuteReader();

					//
					if (rdr != null && rdr.HasRows)
					{
						//
						rdr.Read();

						//
						mainResult.UpdateUsername = new UpdateUsernameResult { Result = rdr["result"] as string, ResultDetail = rdr["resultDetail"] as 

string };

						// Is SUCCESS, retrieve fields from the MySqlDataReader.
						if (mainResult.UpdateUsername.Succeeded)
						{
							// Retrieve the fields from the Reader.
							// NOTE: No fields to retrieve for this case.
						}
					}
				}
				// Update the User Profile.
				if (cmdEditUser != null)
				{
					// Call the Stored procedure.
					rdr = cmdEditUser.ExecuteReader();

					//
					if (rdr != null && rdr.HasRows)
					{
						//
						rdr.Read();

						//
						mainResult.EditUser = new EditUserResult { Result = rdr["result"] as string, ResultDetail = rdr["resultDetail"] as string };

						// Is SUCCESS, retrieve fields from the MySqlDataReader.
						if (mainResult.EditUser.Succeeded)
						{
							// Retrieve the fields from the Reader.
							// NOTE: No fields to retrieve for this case.
						}
					}
				}
				// Update the User Password.
				if (cmdPassword != null)
				{
					// Call the Stored procedure.
					rdr = cmdPassword.ExecuteReader();

					//
					if (rdr != null && rdr.HasRows)
					{
						//
						rdr.Read();

						//
						mainResult.ChangePassword = new ChangePasswordResult { Result = rdr["result"] as string, ResultDetail = rdr["resultDetail"] as 

string };

						// Is SUCCESS, retrieve fields from the MySqlDataReader.
						if (mainResult.ChangePassword.Succeeded)
						{
							// Retrieve the fields from the Reader.
							// NOTE: No fields to retrieve for this case.
						}
					}
				}
				// Update the User Security Answers.
				if (cmdSecurity != null)
				{
					// Call the Stored procedure.
					rdr = cmdSecurity.ExecuteReader();

					//
					if (rdr != null && rdr.HasRows)
					{
						//
						rdr.Read();

						//
						mainResult.SecurityQuestions = new SetSecurityQuestionsResult { Result = rdr["result"] as string, ResultDetail = rdr

["resultDetail"] as string };

						// Is SUCCESS, retrieve fields from the MySqlDataReader.
						if (mainResult.SecurityQuestions.Succeeded)
						{
							// Retrieve the fields from the Reader.
							// NOTE: No fields to retrieve for this case.
						}
					}
				}
			}
			catch (Exception ex)
			{
				// TODO: Add some code on the web side to handle errors gracefully.
				throw new ApplicationException(ex.Message);
			}
			finally
			{
				// If the MySqlDataReader is not null and is not closed, close it.
				if (rdr != null && !rdr.IsClosed) rdr.Close();
			}
			//
			return mainResult;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="sid"></param>
		/// <param name="paymentType"></param>
		/// <param name="receivablesKeys"></param>
		/// <param name="receivablesAmounts"></param>
		/// <param name="transactionDescription"></param>
		/// <param name="scheduledPaymentDate"></param>
		/// <param name="bankAccountGuid"></param>
		/// <param name="scheduledPaymentParentGuid"></param>
		/// <returns></returns>
		public SubmitPaymentResult EditScheduledPayment(string sid, PaymentType paymentType, string receivablesKeys,
														string receivablesAmounts, string transactionDescription,
														string scheduledPaymentDate,
														string bankAccountGuid, string scheduledPaymentParentGuid)
		{
			SubmitPaymentResult result = null;
			try
			{
				//
				//var cmd = new MySqlCommand { Connection = DbConnection, CommandType = CommandType.StoredProcedure, CommandText = "sp_EditScheduledPayment" };
				using (
					var cmd = new MySqlCommand
								{
									Connection = DbConnection,
									CommandType = CommandType.StoredProcedure,
									CommandText = "sp_EditScheduledPayment"
								})
				{
					//
					cmd.Parameters.AddWithValue("@sid", sid);
					cmd.Parameters["@sid"].Direction = ParameterDirection.Input;

					//
					string paymentTypeAsString = String.Empty;
					if (paymentType == PaymentType.Pref) paymentTypeAsString = "PREF";
					if (paymentType == PaymentType.Achcr) paymentTypeAsString = "ACHCR";
					if (paymentType == PaymentType.Achdr) paymentTypeAsString = "ACHDR";
					if (paymentType == PaymentType.Fedwire) paymentTypeAsString = "FEDWIRE";
					cmd.Parameters.AddWithValue("@PaymentType", paymentTypeAsString);
					cmd.Parameters["@PaymentType"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@ReceivablesKeys", receivablesKeys);
					cmd.Parameters["@ReceivablesKeys"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@ReceivablesAmounts", receivablesAmounts);
					cmd.Parameters["@ReceivablesAmounts"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@Description", transactionDescription);
					cmd.Parameters["@Description"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@ScheduledDate", scheduledPaymentDate);
					cmd.Parameters["@ScheduledDate"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@BankAccountGUID", bankAccountGuid);
					cmd.Parameters["@BankAccountGUID"].Direction = ParameterDirection.Input;

					//
					cmd.Parameters.AddWithValue("@ScheduledPaymentParentGUID", scheduledPaymentParentGuid);
					cmd.Parameters["@ScheduledPaymentParentGUID"].Direction = ParameterDirection.Input;

					//
					result = EditScheduledPayment(cmd);
				}
			}
			catch (Exception ex)
			{
				// TODO: Add some code on the web side to handle errors gracefully.
				throw new ApplicationException(ex.Message);
			}
			return result;
		}
